template("boost") {
  # required: boost_source_dir, boost_outputs
  # optional: boost_libraries, boost_build_dir, boost_install_dir, boost_install_headers, boost_layout, boost_shared_library boost_defines
  action("$target_name") {
    boost_libraries = []
    boost_build_dir = target_out_dir + "/" + target_name
    boost_install_dir = root_out_dir + "/" + target_name
    boost_install_headers = false
    boost_layout = ""
    boost_shared_library = false
    boost_defines = []
    forward_variables_from(invoker,
                           "*",
                           [
                             "script",
                             "args",
                             "input",
                             "output_name",
                           ])
    boost_env = ""
    if (is_win) {
      boost_env = "environment." + host_cpu + "." + target_cpu
    }
    if (is_winxp) {
      boost_defines += [
        "BOOST_USE_WINAPI_VERSION=BOOST_WINAPI_VERSION_WINXP",
        "_WIN32_WINNT=BOOST_WINAPI_VERSION_WINXP",
      ]
    }
    toolset = ""
    if (is_winxp) {
      if (vs_version > 141) {
        toolset = 141
      } else if (vs_version >= 110) {
        toolset = vs_version
      }
    }
    script = "//build/tools/boost.py"
    args = [
      rebase_path(boost_source_dir, root_build_dir),
      string_join(",", boost_libraries) + " ",
      rebase_path(boost_build_dir, root_build_dir),
      rebase_path(boost_install_dir, root_build_dir),
      "$boost_install_headers",
      target_cpu,
      "$is_debug",
      "$static_link_crt",
      boost_layout,
      "$boost_shared_library",
      string_join(",", boost_defines) + " ",
      boost_env + " ",
      toolset + " ",
    ]
    inputs = [ boost_source_dir ]
    outputs = boost_outputs
  }
}
