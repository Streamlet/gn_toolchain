toolchain("msvc") {
  cl = "cl.exe"
  rc = "rc.exe"
  lib = "lib.exe"
  link = "link.exe"

  if (target_cpu == "x64") {
    ml = "ml64.exe"
  } else {
    ml = "ml.exe"
  }

  env = "environment." + host_cpu + "." + target_cpu
  env_wrappper = "ninja -t msvc -e $env --"

  # Make these apply to all tools below.
  lib_switch = ""
  lib_dir_switch = "/LIBPATH:"

  # Object files go in this directory.
  object_subdir = "{{target_out_dir}}/{{label_name}}"

  tool("cc") {
    precompiled_header_type = "msvc"
    pdbname = "{{target_out_dir}}/{{label_name}}_c.pdb"

    # Label names may have spaces in them so the pdbname must be quoted. The
    # source and output don't need to be quoted because GN knows they're a
    # full file name and will quote automatically when necessary.
    depsformat = "msvc"
    description = "CC {{output}}"
    outputs = [ "$object_subdir/{{source_name_part}}.obj" ]

    if (vs_version >= 120) {
      command = "$env_wrappper $cl /c {{source}} /nologo {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} /Fo{{output}} /Fd\"$pdbname\" /FS"
    } else {
      command = "$env_wrappper $cl /c {{source}} /nologo {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} /Fo{{output}} /Fd\"$pdbname\""
    }
  }
  tool("cxx") {
    precompiled_header_type = "msvc"

    # The PDB name needs to be different between C and C++ compiled files.
    pdbname = "{{target_out_dir}}/{{label_name}}_cc.pdb"

    # See comment in CC tool about quoting.
    depsformat = "msvc"
    description = "CXX {{output}}"
    outputs = [ "$object_subdir/{{source_name_part}}.obj" ]

    if (vs_version >= 120) {
      command = "$env_wrappper $cl /c {{source}} /Fo{{output}} /nologo {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} /Fd\"$pdbname\" /FS"
    } else {
      command = "$env_wrappper $cl /c {{source}} /Fo{{output}} /nologo {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} /Fd\"$pdbname\""
    }
  }
  tool("rc") {
    if (vs_version >= 100) {
      command = "$env_wrappper $rc /nologo {{defines}} {{include_dirs}} /fo{{output}} {{source}}"
    } else {
      command = "$env_wrappper $rc {{defines}} {{include_dirs}} /fo{{output}} {{source}}"
    }
    depsformat = "msvc"
    outputs = [ "$object_subdir/{{source_name_part}}.res" ]
    description = "RC {{output}}"
  }
  tool("asm") {
    command = "$env_wrappper $ml /nologo /c /Fo{{output}} {{defines}} {{include_dirs}} {{asmflags}} {{source}}"
    description = "ASM {{output}}"
    outputs = [ "$object_subdir/{{source_name_part}}.obj" ]
  }
  tool("alink") {
    rspfile = "{{output}}.rsp"
    command = "$env_wrappper $lib /OUT:{{output}} /nologo {{arflags}} @$rspfile"
    description = "LIB {{output}}"
    outputs = [
      # Ignore {{output_extension}} and always use .lib, there's no reason to
      # allow targets to override this extension on Windows.
      "{{output_dir}}/{{target_output_name}}.lib",
    ]
    default_output_extension = ".lib"
    default_output_dir = "{{root_out_dir}}"

    # The use of inputs_newline is to work around a fixed per-line buffer
    # size in the linker.
    rspfile_content = "{{inputs_newline}}"
  }
  tool("solink") {
    # E.g. "foo.dll":
    dllname = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
    libname = "${dllname}.lib"  # e.g. foo.dll.lib
    pdbname = "${dllname}.pdb"
    rspfile = "${dllname}.rsp"

    command = "$env_wrappper $link {{ldflags}} /OUT:$dllname /nologo /IMPLIB:$libname /DLL /PDB:$pdbname @$rspfile"

    default_output_extension = ".dll"
    default_output_dir = "{{root_out_dir}}"
    description = "LINK(DLL) {{output}}"
    outputs = [
      dllname,
      libname,
      pdbname,
    ]
    link_output = libname
    depend_output = libname
    runtime_outputs = [
      dllname,
      pdbname,
    ]

    # Since the above commands only updates the .lib file when it changes,
    # ask Ninja to check if the timestamp actually changed to know if
    # downstream dependencies should be recompiled.
    restat = true

    # The use of inputs_newline is to work around a fixed per-line buffer
    # size in the linker.
    rspfile_content = "{{libs}} {{solibs}} {{inputs_newline}} {{rlibs}}"
  }
  tool("solink_module") {
    # E.g. "foo.dll":
    dllname = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
    pdbname = "${dllname}.pdb"
    rspfile = "${dllname}.rsp"

    command = "$env_wrappper $link {{ldflags}} /OUT:$dllname /nologo /DLL /PDB:$pdbname @$rspfile"

    default_output_extension = ".dll"
    default_output_dir = "{{root_out_dir}}"
    description = "LINK_MODULE(DLL) {{output}}"
    outputs = [
      dllname,
      pdbname,
    ]
    runtime_outputs = outputs

    # The use of inputs_newline is to work around a fixed per-line buffer
    # size in the linker.
    rspfile_content = "{{libs}} {{solibs}} {{inputs_newline}} {{rlibs}}"
  }
  tool("link") {
    exename = "{{output_dir}}/{{target_output_name}}{{output_extension}}"
    pdbname = "$exename.pdb"
    rspfile = "$exename.rsp"

    command = "$env_wrappper $link {{ldflags}} /OUT:$exename /nologo /PDB:$pdbname @$rspfile"

    default_output_extension = ".exe"
    default_output_dir = "{{root_out_dir}}"
    description = "LINK {{output}}"
    outputs = [
      exename,
      pdbname,
    ]
    runtime_outputs = outputs

    # The use of inputs_newline is to work around a fixed per-line buffer
    # size in the linker.
    rspfile_content = "{{inputs_newline}} {{libs}} {{solibs}} {{rlibs}}"
  }

  # These two are really entirely generic, but have to be repeated in
  # each toolchain because GN doesn't allow a template to be used here.
  # See //build/toolchain/toolchain.gni for details.
  tool("stamp") {
    command = "cmd /c type nul > \"{{output}}\""
    description = "STAMP {{output}}"
  }
  tool("copy") {
    command = "copy /Y {{source}} {{output}}"
    description = "COPY {{source}} {{output}}"
  }
}
