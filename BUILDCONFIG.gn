# =============================================================================
# PLATFORM SELECTION
# =============================================================================

if (target_os == "") {
  target_os = host_os
}

if (target_cpu == "") {
  if (target_os == "android") {
    # If we're building for Android, we should assume that we want to
    # build for ARM by default, not the host_cpu (which is likely x64).
    # This allows us to not have to specify both target_os and target_cpu
    # on the command line.
    target_cpu = "arm"
  } else {
    target_cpu = host_cpu
  }
}

if (current_cpu == "") {
  current_cpu = target_cpu
}
if (current_os == "") {
  current_os = target_os
}

# =============================================================================
# OS DEFINITIONS
# =============================================================================

is_android = current_os == "android"
is_chromeos = current_os == "chromeos"
is_fuchsia = current_os == "fuchsia"
is_ios = current_os == "ios"
is_linux = current_os == "linux"
is_mac = current_os == "mac"
is_nacl = current_os == "nacl"
is_win = current_os == "win" || current_os == "winuwp"

is_apple = is_ios || is_mac
is_posix = !is_win && !is_fuchsia

# =============================================================================
# BUILD FLAGS
# =============================================================================

declare_args() {
  # Debug build
  is_debug = false
}

declare_args() {
  c_std = "c17"
  cc_std = "c++17"
}

declare_args() {
  is_winxp = false  # targeting to Windows XP
  static_link_crt = is_win  # static or dynamic link crt
  winver = ""  # to define WINVER, _WIN32_WINNT and NTDDI_VERSION
}

if (is_win) {
  winver = "0x0A00"
  if (is_winxp) {
    winver = "0x0501"
    assert(target_cpu == "x86", "Targeting to Windows XP does only support x86")
  }
}

# ==============================================================================
# TOOLCHAIN SETUP
# ==============================================================================

if (is_linux) {
  set_default_toolchain("//build/toolchain/linux:gcc")
} else if (is_mac) {
  set_default_toolchain("//build/toolchain/mac:clang")
} else if (is_win) {
  # set environment variables for msvc build tools
  import("config/win/setup_environment.gni")
  set_default_toolchain("//build/toolchain/win:msvc")
} else {
  assert(false, "Unsupported target_os: $target_os")
}

# =============================================================================
# TARGET DEFAULTS
# =============================================================================

_compile_defaults = [
  "//build/config:default",
  "//build/config:c_std",
  "//build/config:cc_std",
]

if (is_posix) {
  _compile_defaults += [
    "//build/config/posix:default",
    "//build/config/posix:optmize",
    "//build/config/posix:target_arch",
  ]
}

if (is_win) {
  _compile_defaults += [
    "//build/config/win:default",
    "//build/config/win:optmize",
    "//build/config/win:crt_link",
    "//build/config/win:core_libraries",
    "//build/config/win:win_macros",
    "//build/config/win:target_arch",
  ]
}

set_defaults("executable") {
  configs = _compile_defaults
  if (is_posix) {
    configs += [ "//build/config/posix:rpath" ]
  }
}
set_defaults("static_library") {
  configs = _compile_defaults
}
set_defaults("shared_library") {
  configs = _compile_defaults
}
set_defaults("source_set") {
  configs = _compile_defaults
}

# =============================================================================
# IMPORTS
# =============================================================================

# help to build mac app bundle
if (is_mac) {
  import("config/mac/app_bundle.gni")
}

# help to specify subsystem explicitly to build win32 application or console application
if (is_win) {
  import("config/win/application.gni")
}

# help to build makefile projects
import("tools/makefile.gni")

# help to build cmake projects
import("tools/cmake.gni")

# help to build boost
import("tools/boost.gni")

# help to build golang projects
import("tools/golang.gni")
