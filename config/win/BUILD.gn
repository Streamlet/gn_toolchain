assert(is_win)

# =============================================================================
# Default
# =============================================================================

config("default") {
  defines = [
    "UNICODE",
    "_UNICODE",
  ]

  cflags = [
    "/analyze-",
    "/bigobj",
    "/EHsc",
    "/fp:precise",
    "/Gd",
    "/Gm-",
    "/GS",
    "/Oy-",
    "/W3",
    "/WX-",
    "/Zc:forScope",
    "/Zc:inline",
    "/Zc:wchar_t",
    "/Zl",
    "/utf-8",
  ]

  cflags_cc = [ "/EHsc" ]

  ldflags = [
    "/DEBUG",
    "/MANIFEST:EMBED",
  ]
}

# =============================================================================
# Optmize flags
# =============================================================================

config("optmize") {
  cflags = []
  if (is_debug) {
    cflags += [
      "/JMC",
      "/Od",
      "/RTC1",
      "/ZI",
    ]
  } else {
    cflags += [
      "/GL",
      "/Gy",
      "/O2",
      "/Oi",
      "/Zi",
    ]
  }

  ldflags = []
  if (!is_debug) {
    ldflags += [
      "/INCREMENTAL:NO",
      "/LTCG:incremental",
      "/OPT:ICF",
      "/OPT:REF",
    ]
    if (target_cpu == "x86") {
      ldflags += [ "/SAFESEH" ]
    }
  }
}

# =============================================================================
# Dynamic or static link CRT
# =============================================================================

config("crt_link") {
  cflags = []
  if (static_link_crt) {
    if (is_debug) {
      cflags += [ "/MTd" ]
    } else {
      cflags += [ "/MT" ]
    }
  } else {
    if (is_debug) {
      cflags += [ "/MDd" ]
    } else {
      cflags += [ "/MD" ]
    }
  }

  libs = [ "oldnames.lib" ]
  if (static_link_crt) {
    if (is_debug) {
      libs += [
        "libcmtd.lib",
        "libcpmtd.lib",
        "libvcruntimed.lib",
      ]
      if (use_ucrt) {
        libs += [ "libucrtd.lib" ]
      }
    } else {
      libs += [
        "libcmt.lib",
        "libcpmt.lib",
        "libvcruntime.lib",
      ]
      if (use_ucrt) {
        libs += [ "libucrt.lib" ]
      }
    }
  } else {
    if (is_debug) {
      libs += [
        "msvcrtd.lib",
        "msvcprtd.lib",
        "vcruntimed.lib",
      ]
      if (use_ucrt) {
        libs += [ "ucrtd.lib" ]
      }
    } else {
      libs += [
        "msvcrt.lib",
        "msvcprt.lib",
        "vcruntime.lib",
      ]
      if (use_ucrt) {
        libs += [ "ucrt.lib" ]
      }
    }
  }
}

# =============================================================================
# Core libraries to link default
# =============================================================================

config("core_libraries") {
  libs = [
    "kernel32.lib",
    "user32.lib",
    "gdi32.lib",
    "winspool.lib",
    "comdlg32.lib",
    "advapi32.lib",
    "shell32.lib",
    "ole32.lib",
    "oleaut32.lib",
    "uuid.lib",
    "odbc32.lib",
    "odbccp32.lib",
  ]
}

# =============================================================================
# Target arch
# =============================================================================

config("win_macros") {
  defines = [
    "WINVER =$winver",
    "_WIN32_WINNT=$winver",
    "_WIN32_WINDOWS=$winver",
    "WIN32_LEAN_AND_MEAN",
    "WINAPI_FAMILY=100",  # Windows Desktop Applications
    "_CRT_NONSTDC_NO_DEPRECATE",
    "_CRT_NONSTDC_NO_WARNINGS",
    "_CRT_SECURE_NO_WARNINGS",
  ]
}

# =============================================================================
# Target arch
# =============================================================================

config("target_arch") {
  if (target_cpu == "x86") {
    ldflags = [ "/MACHINE:X86" ]
  } else {
    ldflags = [ "/MACHINE:X64" ]
  }
}

# =============================================================================
# Console or windows subsystem
# =============================================================================

config("console_subsystem") {
  if (target_cpu == "x86") {
    ldflags = [ "/SUBSYSTEM:CONSOLE,5.01" ]
  } else {
    ldflags = [ "/SUBSYSTEM:CONSOLE,5.02" ]
  }
}

config("windows_subsystem") {
  if (target_cpu == "x86") {
    ldflags = [ "/SUBSYSTEM:WINDOWS,5.01" ]
  } else {
    ldflags = [ "/SUBSYSTEM:WINDOWS,5.02" ]
  }
}
